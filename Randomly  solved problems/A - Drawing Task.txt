/*
       ____            ___________
      /\   \          |
     /  \   \         |
    /    \   \        |___________
   /______\   \                  |
  /        \   \                 |
 /          \  /       __________|
/            \/

 ___  ___              F
|\  \|\   \            F
\ \  \_\   \           F
 \ \ ___    \          F
  \  \ \\ \  \         F
   \  \__\\ \_\        F
    \ |__| \|__|       F

 */

#include<iostream>
#include<string>
#include<algorithm>
#include<cmath>
#include <cstring>
#include <functional>
#include<unordered_map>
#include <sstream>
#include<map>
#include<set>
#include <iomanip>
#include<vector>
#include<valarray>
#include<deque>
#define ll   long long
#define fast ios_base::sync_with_stdio(0); cin.tie(0);  cout.tie(0);
//#include<bits/stdc++.h>
using namespace std;
#define REPi(a,b) for (int i = a; i <= b; i++)
#define REPj(a,b) for (int j = a; j <= b; j++)
#define genMod(x,Mod) (x<0)?(x % Mod + Mod) : (x % Mod)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define all(v) v.begin(),v.end()
#define sortit(name) sort(name.begin(),name.end())
#define sz(v) (int) v.size()
ll REMINDER = 1000000007;

void solve() {
    ll n,m,q,i = 0, j = 0,cnt = 0;
    cin>>n>>m>>q;
    char c;
    ll r1,r2,c1,c2;
char **x= new char*[n];

for(i=0;i<n;i++)
    x[i]=new char[m];

    for (i=0;i<n;i++){
        for(j=0;j<m;j++){
          x[i][j]='.';
        }
    }

while(q--){
    cin>>r1>>c1>>r2>>c2>>c;
    r1--;r2--;c1--;c2--;
        for( i=min(r1,r2);i<=max(r1,r2);i++)
        {
            for(j=min(c1,c2);j<=max(c1,c2);j++)
            {
              x[i][j]=c;
            }
        }
}
for(i=0;i<n;i++){
    for(j=0;j<m;j++){
        cout<<x[i][j];
    }
    if(i!=n-1)
    cout<<endl;
}

}


int main()
{
    fast; // ashf gamed tenen
    //freopen("window.in", "r", stdin);   // for file reading

    ll test_case=1 ; //cin >> test_case;
    while (test_case--)
    {
        solve();

    }

    return 0;
}