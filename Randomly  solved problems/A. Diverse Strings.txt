#include<iostream>
#include<string>
#include<algorithm>
#include<cmath>
#include <cstring>
#include <functional>
#include<unordered_map>
#include <sstream>
#include<map>
#include<set>
#include <iomanip>
#include<vector>
#include<valarray>
#include<deque>
#define ll   long long
#define fast ios_base::sync_with_stdio(0); cin.tie(0);  cout.tie(0);
//#include<bits/stdc++.h>
using namespace std;
#define REPi(a,b) for (int i = a; i <= b; i++)
#define REPj(a,b) for (int j = a; j <= b; j++)
#define genMod(x,Mod) (x<0)?(x % Mod + Mod) : (x % Mod)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define all(v) v.begin(),v.end()
#define sz(v) (int) v.size()
ll REMINDER = 1000000007;
bool checkdups(ll arr[], ll n){
    ll i;
    for( i=0;i<27;i++){
        if(arr[i]>1)
            return true;
    }
    return false;
}
void solve() {
    ll n,sum=0, i = 0, j = 0,cnt =2;
    char a='z',b='a';    string alpha="abcdefghijklmnopqrstuvwxyz";
    string in;
    cin>>in;
if(in.size()==1){
    cout<<"YES"<<endl;
    return;
}
    ll arr[27]={0}; ll indexes[27];

    for(i=0;i<in.size();i++){
        for(j=0;j<27;j++){
            if(in[i]==alpha[j]){
                arr[j]++;
            }
        }
    }
    bool flag1 ,flag2=0;
    flag1=checkdups(arr,27);
for(i=0;i<in.size();i++){
    a=min(a,in[i]);
    b=max(b,in[i]);
}
ll a_place,b_place;
for(j=0;j<27;j++){
    if(a==alpha[j])
        a_place=j;
    if(b==alpha[j])
        b_place=j;
}
for(i=0;i<in.size();i++){
    if(in[i]==a || in[i]==b) {
        continue;
    }
    for(j=a_place;j<b_place;j++){
        if(in[i]==alpha[j])
            cnt++;
    }
    }
ll diff=b_place-a_place+1;


if(flag1==0 && diff==cnt ){
    cout<<"YES"<<endl;
}
else
    cout<<"NO"<<endl;









}
int main()
{
    fast; // ashf gamed tenen
    //freopen("window.in", "r", stdin);   // for file reading

    ll test_case=1 ;cin >> test_case;
    while (test_case--)
    {
        solve();

    }

    return 0;
}
