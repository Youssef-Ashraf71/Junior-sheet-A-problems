#include<iostream>
#include<string>
#include<algorithm>
#include<cmath>
#include <cstring>
#include <functional>
#include<unordered_map>
#include <sstream>
#include<map>
#include<set>
#include <iomanip>
#include<vector>
#include<valarray>
#include<deque>
#define ll   long long
#define fast ios_base::sync_with_stdio(0); cin.tie(0);  cout.tie(0);
//#include<bits/stdc++.h>
using namespace std;
#define REPi(a,b) for (int i = a; i <= b; i++)
#define REPj(a,b) for (int j = a; j <= b; j++)
#define genMod(x,Mod) (x<0)?(x % Mod + Mod) : (x % Mod)
#define F first
#define S second
#define PB push_back
#define MP make_pair
#define all(v) v.begin(),v.end()
#define sz(v) (int) v.size()
ll REMINDER = 1000000007;
void solve() {
    ll n, i = 0, j = 0,cnt = 0;
    string s;
    cin>>s;
    if(s.size()<5){
        cout<<"NO";
        return;
    }
    ll index[5];
    for(i=0;i<5;i++)
        index[i]=-1;

    for(i=0;i<s.size();i++){
        if(s[i]=='h') {
            index[0] = i;
            break;
        }
    }
    for(i=index[0]+1;i<s.size();i++){
        if(s[i]=='e') {
            index[1] = i;
            break;
        }
    }
    for(i=index[1]+1;i<s.size();i++){
        if(s[i]=='l') {
            index[2] = i;
            break;
        }
    }
    for(i=index[2]+1;i<s.size();i++){
        if(s[i]=='l') {
            index[3] = i;
            break;
        }
    }
    for(i=index[3]+1;i<s.size();i++){
        if(s[i]=='o') {
            index[4] = i;
            break;
        }
    }
    /*
for(i=0;i<5;i++)
    cout<<index[i]+1<<" ";
cout<<endl;
*/
    bool flag=1;
    for(i=0;i<4;i++){
        if(index[i+1]<index[i])
            flag=0;
    }
    if(flag)
        cout<<"YES";
    else
        cout<<"NO";
}
int main()
{
    fast; // ashf gamed tenen
    //freopen("window.in", "r", stdin);   // for file reading

    ll test_case=1 ; //cin >> test_case;
    while (test_case--)
    {
        solve();

    }

    return 0;
}
